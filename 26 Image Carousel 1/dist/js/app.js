/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
var imgsContainer = document.getElementById('imgs-container');
var carousel = document.getElementById('carousel');
var imgs = imgsContainer.querySelectorAll('img');
var dots = document.querySelectorAll('.dots li');
var prev = document.getElementById('prev');
var next = document.getElementById('next');
var idx = 0;
var size = computeSize();
var interval = setInterval(forward, 2000);
prev.addEventListener('click', function () {
    resetIntervalAndCallFunc(back);
});
next.addEventListener('click', function () {
    resetIntervalAndCallFunc(forward);
});
imgsContainer.addEventListener('transitionend', function () {
    console.log("transitionend");
});
function forward() {
    idx++;
    changeImage();
}
function back() {
    idx--;
    changeImage();
}
function changeImage() {
    if (idx > imgs.length - 1) {
        // first limit counter to prevent fast-change bugs
        // 解决快速回退的问题
        idx = 0;
    }
    else if (idx < 0) {
        idx = imgs.length - 1;
    }
    hightDots();
    imgsContainer.style.transform = "translateX(".concat(-size * idx, "px)");
}
function computeSize() {
    var width = getComputedStyle(carousel).getPropertyValue('width');
    return +width.substring(0, width.length - 2);
}
function hightDots() {
    // remove all active then add active class
    var activeCls = 'active';
    dots.forEach(function (dot) { return dot.classList.remove(activeCls); });
    dots[idx].classList.add(activeCls);
}
function resetIntervalAndCallFunc(func) {
    clearInterval(interval);
    func();
    interval = setInterval(forward, 2000);
}
// loop
// https://codepen.io/jonathan-asbell/pen/QWgampv

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvYXBwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBaUI7QUFDL0UsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQWlCO0FBQ3BFLElBQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQTZCO0FBQzlFLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQTZCO0FBQzlFLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFpQjtBQUM1RCxJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBaUI7QUFHNUQsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUNYLElBQUksSUFBSSxHQUFHLFdBQVcsRUFBRTtBQUN4QixJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQztBQUl4QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFDO0lBQzFCLHdCQUF3QixDQUFDLElBQUksQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFFRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFDO0lBQzFCLHdCQUF3QixDQUFDLE9BQU8sQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFFRixhQUFhLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUFDO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFakMsQ0FBQyxDQUFDO0FBRUYsU0FBUyxPQUFPO0lBQ1osR0FBRyxFQUFFO0lBQ0wsV0FBVyxFQUFFO0FBQ2pCLENBQUM7QUFFRCxTQUFTLElBQUk7SUFDVCxHQUFHLEVBQUU7SUFDTCxXQUFXLEVBQUU7QUFDakIsQ0FBQztBQUdELFNBQVMsV0FBVztJQUNoQixJQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztRQUNyQixrREFBa0Q7UUFDbEQsWUFBWTtRQUVaLEdBQUcsR0FBRyxDQUFDO0tBQ1Y7U0FBSyxJQUFHLEdBQUcsR0FBQyxDQUFDLEVBQUM7UUFDWCxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO0tBQ3hCO0lBQ0QsU0FBUyxFQUFFO0lBQ1gsYUFBYSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcscUJBQWMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxRQUFLO0FBQ2xFLENBQUM7QUFHRCxTQUFTLFdBQVc7SUFDaEIsSUFBTSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0lBQ2xFLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBSUQsU0FBUyxTQUFTO0lBQ2QsMENBQTBDO0lBQzFDLElBQU0sU0FBUyxHQUFHLFFBQVE7SUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFHLElBQUksVUFBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQS9CLENBQStCLENBQUM7SUFDcEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO0FBQ3RDLENBQUM7QUFHRCxTQUFTLHdCQUF3QixDQUFDLElBQWM7SUFDNUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUN2QixJQUFJLEVBQUU7SUFDTixRQUFRLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBQyxJQUFJLENBQUM7QUFDeEMsQ0FBQztBQUVELE9BQU87QUFDUCxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cy1zYXNzLWRlbW8vLi9zcmMvYXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGltZ3NDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1ncy1jb250YWluZXInKSEgYXMgSFRNTEVsZW1lbnRcclxuY29uc3QgY2Fyb3VzZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2Fyb3VzZWwnKSEgYXMgSFRNTEVsZW1lbnRcclxuY29uc3QgaW1ncyA9IGltZ3NDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnaW1nJykhIGFzIE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+XHJcbmNvbnN0IGRvdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZG90cyBsaScpISBhcyBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PlxyXG5jb25zdCBwcmV2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZXYnKSEgYXMgSFRNTEVsZW1lbnRcclxuY29uc3QgbmV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXh0JykhIGFzIEhUTUxFbGVtZW50XHJcblxyXG5cclxubGV0IGlkeCA9IDBcclxubGV0IHNpemUgPSBjb21wdXRlU2l6ZSgpXHJcbmxldCBpbnRlcnZhbCA9IHNldEludGVydmFsKGZvcndhcmQsMjAwMClcclxuXHJcblxyXG5cclxucHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PntcclxuICAgIHJlc2V0SW50ZXJ2YWxBbmRDYWxsRnVuYyhiYWNrKVxyXG59KVxyXG5cclxubmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PntcclxuICAgIHJlc2V0SW50ZXJ2YWxBbmRDYWxsRnVuYyhmb3J3YXJkKVxyXG59KVxyXG5cclxuaW1nc0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywoKT0+e1xyXG4gICAgY29uc29sZS5sb2coXCJ0cmFuc2l0aW9uZW5kXCIpO1xyXG4gICAgXHJcbn0pXHJcblxyXG5mdW5jdGlvbiBmb3J3YXJkKCl7XHJcbiAgICBpZHgrKyAgICBcclxuICAgIGNoYW5nZUltYWdlKClcclxufVxyXG5cclxuZnVuY3Rpb24gYmFjaygpe1xyXG4gICAgaWR4LS1cclxuICAgIGNoYW5nZUltYWdlKClcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNoYW5nZUltYWdlKCl7XHJcbiAgICBpZihpZHggPiBpbWdzLmxlbmd0aCAtIDEpe1xyXG4gICAgICAgIC8vIGZpcnN0IGxpbWl0IGNvdW50ZXIgdG8gcHJldmVudCBmYXN0LWNoYW5nZSBidWdzXHJcbiAgICAgICAgLy8g6Kej5Yaz5b+r6YCf5Zue6YCA55qE6Zeu6aKYXHJcbiAgICAgICBcclxuICAgICAgICBpZHggPSAwXHJcbiAgICB9ZWxzZSBpZihpZHg8MCl7XHJcbiAgICAgICAgaWR4ID0gaW1ncy5sZW5ndGggLSAxXHJcbiAgICB9XHJcbiAgICBoaWdodERvdHMoKVxyXG4gICAgaW1nc0NvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkey1zaXplICogaWR4fXB4KWBcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNvbXB1dGVTaXplKCk6bnVtYmVye1xyXG4gICAgY29uc3Qgd2lkdGggPSBnZXRDb21wdXRlZFN0eWxlKGNhcm91c2VsKS5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpXHJcbiAgICByZXR1cm4gK3dpZHRoLnN1YnN0cmluZygwLHdpZHRoLmxlbmd0aC0yKVxyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGhpZ2h0RG90cygpe1xyXG4gICAgLy8gcmVtb3ZlIGFsbCBhY3RpdmUgdGhlbiBhZGQgYWN0aXZlIGNsYXNzXHJcbiAgICBjb25zdCBhY3RpdmVDbHMgPSAnYWN0aXZlJ1xyXG4gICAgZG90cy5mb3JFYWNoKGRvdCA9PiBkb3QuY2xhc3NMaXN0LnJlbW92ZShhY3RpdmVDbHMpKVxyXG4gICAgZG90c1tpZHhdLmNsYXNzTGlzdC5hZGQoYWN0aXZlQ2xzKVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gcmVzZXRJbnRlcnZhbEFuZENhbGxGdW5jKGZ1bmM6IEZ1bmN0aW9uKXtcclxuICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXHJcbiAgICBmdW5jKClcclxuICAgIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZm9yd2FyZCwyMDAwKVxyXG59XHJcblxyXG4vLyBsb29wXHJcbi8vIGh0dHBzOi8vY29kZXBlbi5pby9qb25hdGhhbi1hc2JlbGwvcGVuL1FXZ2FtcHYiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=