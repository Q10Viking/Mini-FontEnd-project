/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
var imgsContainer = document.getElementById('imgs-container');
var carousel = document.getElementById('carousel');
var imgs = imgsContainer.querySelectorAll('img');
var dots = document.querySelectorAll('.dots li');
var prev = document.getElementById('prev');
var next = document.getElementById('next');
var idx = 1;
var seconds = 2000;
var size = computeSize();
imgs = getCloneImgs();
var interval = setInterval(forward, seconds);
prev.addEventListener('click', function () {
    resetIntervalAndCallFunc(back);
});
next.addEventListener('click', function () {
    resetIntervalAndCallFunc(forward);
});
function forward() {
    idx++;
    changeImage();
}
function back() {
    idx--;
    changeImage();
}
function changeImage() {
    if (idx > imgs.length - 1 || idx < 0) {
        // first limit counter to prevent fast-change bugs
        // 解决快速回退的问题  
        return;
    }
    hightDots();
    imgsContainer.style.transition = "transform 0.8s ease-in-out";
    imgsContainer.style.transform = "translateX(".concat(-size * idx, "px)");
}
function computeSize() {
    var width = getComputedStyle(carousel).getPropertyValue('width');
    return +width.substring(0, width.length - 2);
}
function hightDots() {
    // remove all active then add active class
    var activeCls = 'active';
    dots.forEach(function (dot) { return dot.classList.remove(activeCls); });
    var dotIdx = null;
    if (idx === imgs.length - 1) {
        dotIdx = 0;
    }
    else if (idx === 0) {
        dotIdx = dots.length - 1;
    }
    else {
        dotIdx = idx - 1;
    }
    dots[dotIdx].classList.add(activeCls);
}
function resetIntervalAndCallFunc(func) {
    clearInterval(interval);
    func();
    interval = setInterval(forward, 2000);
}
// loop
// https://codepen.io/jonathan-asbell/pen/QWgampv
/**
 *
 * 添加克隆首尾
 */
function getCloneImgs() {
    var firstImgClone = imgs[0].cloneNode();
    var lastImgClone = imgs[imgs.length - 1].cloneNode();
    firstImgClone.classList.add('first-clone');
    lastImgClone.classList.add('last-clone');
    imgsContainer.appendChild(firstImgClone);
    imgsContainer.prepend(lastImgClone);
    return imgsContainer.querySelectorAll('img');
}
/**
 * 每次检查是否是移动到了克隆的地方
 */
imgsContainer.addEventListener('transitionend', function () {
    // 每次移动完之后进行检查
    if (imgs[idx].classList.contains('first-clone')) {
        imgsContainer.style.transition = 'none';
        idx = 1;
        imgsContainer.style.transform = "translateX(".concat(-size * idx, "px)");
        // imgsContainer.style.transition = val
    }
    else if (imgs[idx].classList.contains('last-clone')) {
        imgsContainer.style.transition = 'none';
        idx = imgs.length - 2;
        imgsContainer.style.transform = "translateX(".concat(-size * idx, "px)");
    }
});
imgsContainer.addEventListener('mouseover', function () {
    console.log("mouseover");
    clearInterval(interval);
});
imgsContainer.addEventListener('mouseout', function () {
    console.log("mouseout");
    interval = setInterval(forward, seconds);
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,